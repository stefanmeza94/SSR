NextJs:

Posto next radi na principu strukture foldera i tako odredjuje rute za nase stranice, svaki index.js fajl bice tretiran kao / nista, dakle ako se nalazimo u page folderu i napravimo index.js fajl on ce biti prikazan na adresi "localhost:3000". Ako pak imamo npr about folder unutar page foldera i tu stavimo index.js fajl on nece biti tretiran kao "localhost:3000/about/index.js/ vec samo /about. Drugi nacin za pravljenje ruta jeste da unutar istog foldera page napravimo fajl sa drugacijim imenom od index, npr portfolio.js. U tom slucaju ruta za taj fajl bice "localhost:3000/portfolio", dakle jedino index imenovane fajlove gleda posebno i njih uizma kao polaznu tacku u svakom folderu, medjutim ako imenujemo drugacije fajl onda ce njega gledati kao nesto sto treba da doda u url. 
Postoji opcija da se prave dinmacike rute. Njih pravimo tako sto pisemo [ ] oko imena fajla. Npr ovako: [id].js, izgleda cudno ali je ovo pravilna sintaksa, naravno ovaj id je proizvoljan mozemo da napisemo i projectid ne mora da bude id.
Da bi pristupili jedinstvenom itemu preko i prikazali jedan item iz neke kolekcije u toj dinamickoj ruti mozemo da koristimo hook iz next biblioteke tacnije iz next/router biblioteke "useRouter". Kada budemo pozvali usRouter hook (koji mozemo da koristimo u bilo kojoj funkconalnoj komponenti) on ce nam vratiti router objekat.

Public folder je takodje zanimljiv, next ce za nas sve fajlove iz public foldera da servira staticki to znaci da mozemo da referenciramo sta god zelimo u nasim js fajlovima, css-u iz tog public foldera (uglvanom se tu stavljaju slike, fontovi koje koristimo u projektu)
Tako da kada budemo zelili da referenciramo neku sliku iz public foldera mozemo da izostavimo public i samo pisemo "ime-slike.jpg"

Ako stavimo <a></a> unutar <Link> komponente, next ce da detektuje da smo stavili nas anchor tag i njega ce da renderuje (nece svoj, jer je <Link /> komponenta u pozadini zapravo <a></a>), uz funckonalnost <Link /> komponente, onda mozemo i da stilizujemo nas achnor tag. Ako vec stavljamo nas <a> onda ne stavljamo njemu href atribute gde zelimo da vodi taj link vec href atribute ostaje na <Link href='some-link' />, link komponenta ce automatiski da doda taj href nasem <a> tagu

React: 
Ako pogledamo obicnu react aplikaciju i udjemo u "view page source" videcemo da u body elementu nema bukvalno nikakavog sadrzaja. To je zato sto prilikom pocetnog odnosno incijalnog ucitavanja stranice ne dobijamo nista. Tek kasnije nas broswer renderuje sta smo prikazali unutar aplikacije. Kada se pokrene nas development server od strane reacta (npm start) na localhost:3000 to sto nama salje taj lokalni server jeste maltene prazan html sa nekim osnovim podacima. I tek nakon tog inicjalnog ucitavanja stranice nas browser renderuje sta treba u aplikaciji (u divu sa id-em "root"). Taj content koji nam serveria lokalni server jeste upravo to sto vidimo u view page source a tu ne postoje podaci koje vidimo renderovane na stranici kasnije, zato sto javascrtip odnosno react renderuje sta je potrebno nakon tog inicijalnog ucitavanja stranice. To naravno sa sobom povclaci par nedostatka. Nas user mora da ceka za podatke da budu ucitani da bi video nesto renderovano na ekranu. To resavamo sa nekim load spinerom dok se podaci ne ucitaju i stvari ne budu renderovane na ekranu. Jos veci problem moze da bude "Search Engine Optimization". Ako pravimo neki app gde google search engine mora da bude svestan naseg sadrzaja imacemo problem posto SEO upravo vidi taj pocetni prazan html. Naravno to nije uvek problem, ako imamo neki sajt gde user treba da se loguje da bi video neku stranicu ili ako pravimo neki admin dashboard unutar nase aplikacije onda search engine optimization mozda i nije bitan toliko jer user svakako nece da vidi nasu admin stranicu ali ako imamo neku aplikaciju koja sadrzi mnogo blogova koji su odmah dostpuni ili neka prodavnica gde user odma treba da vidi sve proizvode onda obicno zelimo da search engine optimization vidi taj nas sadrzaj na stranici. 
Kada povlacimo nesto sa servera, to se ne vidi prilikom pocetnog uctavanja stranice jer mi dobijamo prazan html i tek nakon tog pocetnog ucitavanja nas broswer ce da posalje zahtev i mi dobijamo nazad proizvode koje zelimo da prikazemo useru. To je nesto u cemu moze da nam pomogne next js.
NextJs nam pomaze sa necim sto se zove pre-rendering. Zamislimo da imamo neku stranicu, neku rutu koja ucitava neki fajl iz nasih ruta kojoj su potrebni podaci. Kada je zahtev poslat za ovu rutu ono sto nextJs radi jeste da ce on vratiti pre-renderovanu stranicu i to je razlika u odnosu na react. Kod react on nam pocetno vraca praznu html stranicu i ceo javascript kod i onda taj javascript kod pokrece i prikazuje nesto na stranici (sve se to desava extremno brzo tako da to nije problem) ali ako pogledamo primer gde bi trebali fetchujemo neke podatke koji treba da budu prikazani na nekoj stranici, takvi podaci se ucitavaju od servera i to ume da potraje, ali to naravno nije slucaj ako je stranica pre-renderovana kao kod nextJs-a. Umesto da ucitava te podatke tek nakon sto je server poslao te podatke klijentu, nextJs unapred renderuje stranicu i unapred renderuje sav html sadrzaj sa savim podacima koji su mozda potrebni, ucitava to unapred i unapred generise zavrsenu html stranicu tako da ova zavrsena i skroz kompletna html stranica bude poslata klijentu, odnosno useru. To je takodje dobro za SEO (Serach Engine Optimization). Naravno i dalje zelimo da imamo interaktivan react app, tako da nextJs ne salje samo pre-renderovanu stranicu vec ce da posalje i sav javascript kod koji mu pripada i odradice nesto sto se zove  hidratacija stranice, poslace javascript kod i taj kod ce da preuzme tu pre-renderovanu stranicu i pustice react da odradi ostatak posla.
Dakle nextjs za nas priprema unapred sav html sadrzaj i ucatava unapred te podatke koji ce eventualno da budu potrebni.
Ovaj pre-rendering utice samo na INICIJALNO UCITAVANJE, kada ucitamo nasu prvu stranicu ova stranica ce biti pre-renderovana (koju sada mogu da vide serach engine crawleri) i zatim kad smo na web sajtu i kada se hidratise sa reactom dobijamo single page application, tj react preuzima odatle. Dakle kada bi od te pocetno ucitane stranice isli na neku sledecu stranica, ta sledeca stranica nije pre-renderovana vec nju renderuje react. 
Da bi uspeo u ovome nextJs ima dve forme pre-renderovanja. Mozemo da biramo koju cemo da koristimo. Prva forma i preporucena za koriscenje jeste "static generation". Druga forma, odnosno alternativa jeste "server-side rendering". Razlika je sto kod "static generation" sve stranice su ucitane unpred tokom build faze (kada bildujemo nasu aplikacju za production, dakle pre nego sto je deploy-ujemo pripremimo nase stranice), dok sa "server-side renderingom" sve stranice su kreirane bas na vreme nakon deploy-ovanja kada zahtev dodje do servera. Takodje postoji opcija i mesanje te dve forme. 

Ideja iza statickog generisanja stranice je da se generise stranica unapred tokom build-a. Kada kazemo da se unapred generise mislimo da se sav html kod i svi podaci koji cine sadrzaj budu sprepremljeni unpared. Dakle sve nase stranice su pripremljene tokom build faze pre nego sto deploy-ujemo aplikaciju. Posto su nase stranice pre-build tokom build faze jednom kada ih deploy-ujemo one mogu da budu kesirane od strane servera (od CDN koji mozda servira nasu aplikaciju) i onda predstojeci zahtevi sa klijentske strane mogu da budu servirani odmah sa tim pre-build stranicama. Naravno ostaje da se nasa aplikacija hidratise sa reactom, samo je razlika sto ta pocetna html stranica nije prazna kao kod obicnog reacta. 
Kako da kazemo nextJs-u da zelimo dao nasa stranica bude pre-renderovana?
Postoji specificna funckija koju mozemo da exportujemo iz nase komponete, ali SAMO iz nase PAGE komponente, ne moze iz drugih react komponenti, vec samo iz komponenti koje se nalaze unutar pages foldera. Ta funkcija se zove export async function getStaticProps(). Posto je asinrohan vracace promise. Takodje specijalno za ovu funkciju jeste da mozemo da pokrecemo bilo koj kod koji bi se normalno pokretao na serveru. Znaci u toj funkciji ne pokrecemo kod koji se pokrece na klijentskoj strani, sto znaci da u toj funkciji necemo da imamo pristup nekim klijentskim api-ima, kao sto je window objekat npr, ali mozemo da kucamo kod koji bi se inace pokretao na serveru. Kod koji napisemo unutar funckije getStaticProps() nece da bude ukljucen u bundle koji je poslat klijentu, sav kod unutar te funkcije nece da bude vidljiv klijentu (ako imamo neki kod unutar te funkcije koji sadrzi neke kredencijale oni nece biti vidljivi klijentu). Kada exportujemo tu funkcije iz neke komponente koja se nalazi u pages folderu to ce signalizirati nextJs-u da ta komponenta treba da bude pre-generated. NextJs ce po defaultu da radi generise stranice unapred, ali postoje nacini da kazemo nextJs-u da ne zelimo da se neke stranice pre-generisu. 